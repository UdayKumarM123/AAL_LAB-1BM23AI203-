#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define MAX_SIZE 1000

int binarySearch(int arr[], int left, int right, int key) {
    while (left <= right) {
        int mid = left + (right - left) / 2;
        
        if (arr[mid] == key) {
            return mid;
        }
        
        if (arr[mid] < key) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1;
}

void bubbleSort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - 1 - i; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int key, n, i, result;
    clock_t start_time, end_time;
    double time_taken;

    printf("Enter the number of elements (up to %d): ", MAX_SIZE);
    scanf("%d", &n);

    if (n > MAX_SIZE) {
        printf("Number of elements exceeds the maximum size of %d\n", MAX_SIZE);
        return 1;
    }

    int a[MAX_SIZE];

    srand(time(0));
    for (i = 0; i < n; i++) {
        a[i] = rand() % 100;
    }

    printf("Array elements before sorting:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");

    bubbleSort(a, n);

    printf("Array elements after sorting:\n");
    for (i = 0; i < n; i++) {
        printf("%d ", a[i]);
    }
    printf("\n");

    key = rand() % 100;
    printf("Random key to search for: %d\n", key);

    start_time = clock();
    result = binarySearch(a, 0, n - 1, key);
    end_time = clock();

    time_taken = ((double)(end_time - start_time)) / CLOCKS_PER_SEC;

    if (result != -1) {
        printf("Element %d is found at index %d.\n", key, result);
    } else {
        printf("Element not found\n");
    }

    printf("Time Taken in seconds: %f\n", time_taken);

    return 0;
}

OUTPUT:
Enter the number of elements (up to 1000): 56
Array elements before sorting:
70 25 53 4 2 54 93 25 93 76 8 99 28 96 57 62 94 58 41 61 85 1 2 39 66 91 4 59 66 97 66 89 74 19 93 76 25 38 53 18 15 14 70 95 62 79 57 8 37 50 70 22 3 24 13 70 
Array elements after sorting:
1 2 2 3 4 4 8 8 13 14 15 18 19 22 24 25 25 25 28 37 38 39 41 50 53 53 54 57 57 58 59 61 62 62 66 66 66 70 70 70 70 74 76 76 79 85 89 91 93 93 93 94 95 96 97 99 
Random key to search for: 16
Element not found
Time Taken in seconds: 0.000002


